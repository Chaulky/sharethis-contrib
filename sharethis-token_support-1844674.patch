diff --git a/sharethis.module b/sharethis.module
index 3ac3aa3..5e9e133 100644
--- a/sharethis.module
+++ b/sharethis.module
@@ -212,6 +212,24 @@ function sharethis_configuration_form($form, &$form_state) {
     '#type' => 'checkbox',
     '#default_value' => variable_get('sharethis_late_load', FALSE),
   );
+  if (module_exists('token')) {
+    $form['advanced']['sharethis_title_global'] = array(
+      '#title' => t('Title'),
+      '#description' => t('You can use tokens to generate the title when sharing. By default the node title will be used.'),
+      '#type' => 'textfield',
+      '#default_value' => variable_get('sharethis_title_global', FALSE),
+      '#element_validate' => array('token_element_validate'),
+      '#token_type' => array('node')
+    );
+
+    $form['advanced']['token_help'] = array(
+      '#title' => t('Replacement patterns'),
+      '#theme' => 'token_tree',
+      '#token_types' => array('node'),
+      '#collapsible' => TRUE,
+      '#collapsed' => FALSE,
+      );
+  }
   $form['advanced']['sharethis_twitter_suffix'] = array(
     '#title' => t("Twitter Suffix"),
     '#description' => t("Optionally append a Twitter handle, or text, so that you get pinged when someone shares an article. Example: <em>via @YourNameHere</em>"),
@@ -335,7 +353,17 @@ function sharethis_node_view($node, $view_mode, $langcode) {
   // Get the full path to insert into the Share Buttons.
   $mPath = $base_url . $path_module;
   $mTitle = $node->title;
-
+  if(module_exists('token')){
+    // First check if token is available by content type
+    $_tokenTitle = variable_get('sharethis_title_' . $node->type, FALSE);
+    if($_tokenTitle == FALSE){
+      // Use global
+      $_tokenTitle = variable_get('sharethis_title_global', FALSE);
+    }
+    if($_tokenTitle != FALSE){
+      $mTitle = token_replace($_tokenTitle, array('node'=>$node), array('clear'=>TRUE));
+    }
+  }
   // Only display the ShareThis buttons if this node fits all the requirements
   if (strpos($data_options['nodeType'], $node->type) !== FALSE) { // Make sure this is the right type of node.
     if (($data_options['viewMode'] == "1") && ($view_mode == "teaser")) { // If "don't show for teaser" is enabled, and this is a teaser, don't do anything
@@ -376,6 +404,50 @@ function sharethis_node_view($node, $view_mode, $langcode) {
 }
 
 /**
+ * hook_form_alter()
+ */
+function sharethis_form_node_type_form_alter(&$form, $form_state) {
+  if( module_exists('token')) { // sharethis allowed for this content type?
+    $_sharethisOptions = sharethis_get_options_array();
+    $nodeTypes = explode(',',$_sharethisOptions['nodeType']);
+    $form['sharethis'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('ShareThis'),
+      '#collapsible' => TRUE,
+      '#collapsed' => TRUE,
+      '#group' => 'additional_settings',
+      '#tree' => TRUE,
+      '#weight' => 10,
+      '#disabled' => !in_array($form['#node_type']->type,$nodeTypes),
+     );
+
+    $form['sharethis']['sharethis_title_'.$form['#node_type']->type] = array(
+      '#title' => t('ShareThis title'),
+      '#description' => t('You can use tokens to generate the title when sharing. By default the node title will be used.'),
+      '#type' => 'textfield',
+      '#default_value' => variable_get('sharethis_title_'.$form['#node_type']->type, FALSE),
+      '#element_validate' => array('token_element_validate'),
+      '#token_type' => array('node')
+    );
+
+    $form['sharethis']['token_help'] = array(
+      '#title' => t('Replacement patterns'),
+      '#theme' => 'token_tree',
+      '#token_types' => array('node'),
+      '#collapsible' => TRUE,
+      '#collapsed' => FALSE,
+    );
+    
+    $form['#submit'][] = 'sharethis_node_type_form_submit';
+  }
+}
+
+function sharethis_node_type_form_submit($form, &$form_state) {
+  $type = trim($form_state['values']['type']);
+  variable_set('sharethis_title_'.$type, $form_state['values']['sharethis']['sharethis_title_'.$type]);
+}
+
+/**
  * sharethisGetOptionArray is a helper function for DB access.
  *
  * Returns options that have been stored in the database.
